# dopo aver creato il cluster:

# lanciare nell'ordine:
    namespace
    serviceAccount
    volume
    deployment
    service

sudo kubectl -n devops-tools get pods #prende nome pod
sudo kubectl -n devops-tools logs < NOME POD TROVATO> #trova la password d'accesso inizale jenkins

sudo kubectl create token -n devops-tools jenkins-admin #crea il token dalla vm da usare nel pod di jenkins dopo
sudo kubectl exec -it -n devops-tools <NOME PDO TROVATO> -- /bin/bash # entra nel pod di jenkins

# entrare nel pod di jenkins:

# INIZIO COMANDI NEL POD
# installazione kubectl
sudo curl -LO "https://dl.k8s.io/release/$(curl -L -s https://dl.k8s.io/release/stable.txt)/bin/linux/arm64/kubectl"
sudo install -o root -g root -m 0755 kubectl /usr/local/bin/kubectl
sudo chmod +x kubectl
mkdir -p ~/.local/bin
sudo mv ./kubectl ~/.local/bin/kubectl

kubectl config set-credentials jenkins-admin --token=<TOKEN CREATO PRECEDENTEMENTE> #Configura kubectl con il token e il server API del cluster Kubernetes
kubectl config set-cluster clusterdeplo --server=https://172.18.0.4:6443 --insecure-skip-tls-verify=true #metterci l'ip del control-plane
kubectl config set-context clusterdeplo --cluster=clusterdeplo --user=jenkins-admin #Crea un contesto associando il cluster e l'utente
kubectl config use-context clusterdeplo #usa il nuovo contesto appena creato

# FINE COMANDI NEL POD

IMPORTANTE!!!
per risolvere il problema che jenkins non può usare docker, per via dell'accesso al demone, fare la seguente cosa:

# entrare nel NODO dove c'è jenkins: Installare docker nel nodo dove sta jenkins, ossia nel container docker 
(nodo dove è jenkins di Giacomo: kind-worker o a89efbbceffa)
si dovrebbero avere già i permessi di root ma nel caso fare su -, però ce li abbiamo i permessi di root (verificato).

sudo docker exec -it kind-worker bash #per entrare nel nodo # per entrare nel nodo

# eseguire i seguenti comandi:

apt-get update
apt-get install -y ca-certificates curl gnupg lsb-release
mkdir -p /etc/apt/keyrings
curl -fsSL https://download.docker.com/linux/debian/gpg | tee /etc/apt/keyrings/docker.asc
echo "deb [arch=$(dpkg --print-architecture) signed-by=/etc/apt/keyrings/docker.asc] https://download.docker.com/linux/debian $(lsb_release -cs) stable" | tee /etc/apt/sources.list.d/docker.list
apt-get update
apt-get install -y docker-ce docker-ce-cli containerd.io docker-buildx-plugin docker-compose-plugin #scegliere N
docker --version #per verifica
systemctl start docker #demone parte subito
systemctl enable docker #demone parte all'avvio sempre

# uscire dal nodo ed entrare nel pod

# nel POD: Installare docker come da procedura https://docs.docker.com/engine/install/debian/
in questo modo il pod ha docker ma userà il demone di docker del nodo, in cui possiamo fare systemclt, mentr nel pod no.

# da TERMINALE: fuori dal pod e dal nodo, dal terminale "normale", applicare il nuovo deployment.yaml dove è stata aggiunta la socket
sudo kubectl apply -f deployment.yaml

#Installare plugin docker in jenkins:
#   - docker pupeline
#   - docker

# dal browser
per collegarsi con l'app:

sudo kubectl get nodes -o wide | grep control-plane | awk '{print $6}' #trova l'ip
sudo kubectl get svc clusterdeplo -o wide | awk '{if(NR>1) print $5}' | cut -d':' -f2 | cut -d'/' -f1 #trova la porta

per collegarsi a jenkins: http://172.18.0.2:32000/
installare i plugin suggeriti e poi anche questi: kubernetes, kubernetes CLI, kubernetes pipeline,
github integration, git, github branch source, pipeline github, github authentication (alcuni sono già installati, verificare)

# kube-test: creare un job con execute shell cosi, se funziona è tutto ok
kubectl get pods
kubectl get pods -A
kubectl cluster-info

# UTILITA'

# per committare e pushare l'immagine del pod modificato in questo modo fare:

# entrare nel pod
sudo kubectl exec -it <NOME POD> -n devops-tools -- /bin/bash
# sudo kubectl exec -it jenkins-5bdbcbd7ff-8xr5t -n devops-tools -- /bin/bash #esempio

sudo docker commit <container-id> <your-dockerhub-username>/<image-name>:<tag>
#sudo docker commit jenkins-5bdbcbd7ff-8xr5t giacomoalfani/jenkins_custom_complete:latest #esempio

sudo docker login

sudo docker push <your-dockerhub-username>/<image-name>:<tag>
#sudo docker push giacomoalfani/jenkins_custom_complete:latest #esempio

#rimozione immagine committata
sudo docker rmi giacomoalfani/jenkins_custom_complete:latest
